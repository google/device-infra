/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.devtools.mobileharness.infra.ats.common.olcserver;

import static com.google.devtools.mobileharness.shared.constant.LogRecordImportance.IMPORTANCE;
import static com.google.devtools.mobileharness.shared.constant.LogRecordImportance.Importance.DEBUG;
import static com.google.devtools.mobileharness.shared.constant.LogRecordImportance.Importance.IMPORTANT;

import com.google.common.flogger.FluentLogger;
import com.google.devtools.common.metrics.stability.rpc.grpc.GrpcExceptionWithErrorId;
import com.google.devtools.mobileharness.shared.util.file.local.LocalFileUtil;
import io.grpc.Status.Code;
import java.nio.file.Path;
import javax.annotation.concurrent.GuardedBy;
import javax.inject.Inject;
import javax.inject.Singleton;

/** A detector to detect if the OLC server is OOM. */
@Singleton
public class ServerHeapDumpFileDetector {

  private static final FluentLogger logger = FluentLogger.forEnclosingClass();

  private final LocalFileUtil localFileUtil;

  private final Object olcInfoLock = new Object();

  @GuardedBy("olcInfoLock")
  private Long olcProcessId = null;

  @GuardedBy("olcInfoLock")
  private String olcServerWorkingDir = null;

  @Inject
  ServerHeapDumpFileDetector(LocalFileUtil localFileUtil) {
    this.localFileUtil = localFileUtil;
  }

  public void detectHeapDumpExistenceWithGrpcError(GrpcExceptionWithErrorId e) {
    if (!e.getUnderlyingRpcException().getStatus().getCode().equals(Code.INTERNAL)) {
      detectHeapDumpExistence();
    }
  }

  /** Detects if there is a heap dump file generated by the current OLC server. */
  private void detectHeapDumpExistence() {
    synchronized (olcInfoLock) {
      if (olcServerWorkingDir == null || olcProcessId == null) {
        logger
            .atInfo()
            .with(IMPORTANCE, DEBUG)
            .log("Skip checking heap dump existence because no existing OLC server is recorded.");
        return;
      }

      if (!localFileUtil.isFileOrDirExist(olcServerWorkingDir)) {
        logger
            .atInfo()
            .with(IMPORTANCE, DEBUG)
            .log(
                "Skip checking heap dump existence because the working directory of OLC server is"
                    + " not found.");
        return;
      }

      Path heapDumpPath = Path.of(olcServerWorkingDir, "java_pid" + olcProcessId + ".hprof");
      if (localFileUtil.isFileOrDirExist(heapDumpPath)) {
        logger
            .atSevere()
            .with(IMPORTANCE, IMPORTANT)
            .log(
                "Detected OOM heap dump file from OLC server with pid [%s]. Please refer to the"
                    + " heap dump file [%s] and attach it when reporting the issue.",
                olcProcessId, heapDumpPath);

        // Clears the recorded OLC server information.
        olcServerWorkingDir = null;
        olcProcessId = null;
      }
    }
  }

  void setOlcServerInfo(long olcProcessId, String olcServerWorkingDir) {
    synchronized (olcInfoLock) {
      this.olcProcessId = olcProcessId;
      this.olcServerWorkingDir = olcServerWorkingDir;
    }
  }
}
