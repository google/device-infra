/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package mobileharness.shared;

option java_package = "com.google.wireless.qa.mobileharness.shared.proto";
option java_multiple_files = true;

message USB {
  // USB host bus number of the device.
  //
  // For example, if "adb devices -l" returns:
  // List of devices attached
  // 363005DC750400EC  device  usb:3-11.4 ...
  //
  // The hostBus for "363005DC750400EC" is 3.
  int32 host_bus = 1;
  // USB host bus port number of the device.
  //
  // For example, if "adb devices -l" returns:
  // List of devices attached
  // 363005DC750400EC  device  usb:3-11.4 ...
  //
  // The hostPort for "363005DC750400EC" is "11.4".
  string host_port = 2;
  // Whether the usb address is managed by ADB.
  bool adb_managed = 3 [deprecated = true];
  // Optional. The USB serial of the device. Some drivers can get the host_bus
  // and host_port from the serial.
  string serial = 4;
}

message SSH {
  string ip = 1;
  int32 port = 2;
  string username = 3;
  string password = 4 [(datapol.semantic_type) = ST_ACCOUNT_CREDENTIAL];
}

message TCP {
  string ip = 1;
  int32 port = 2;
}

message ADB {
  string serial = 1;
  // Sets if the ADB is connected via TCP.
  optional TCP tcp = 2;
}

// Some devices, like Android, build the ADB connection upon the underlying USB
// connection. We group the ADB and USB communication together, so that users
// can pick either of them.
message ADBOverUSB {
  ADB adb = 1;
  USB usb = 2;
}

message VIDEO {
  // Determine which video device connected.
  string device_fd = 1;
}

message Communication {
  oneof communication {
    // Only one USB connection over the cable, no other communications (e.g.
    // ADB) over it.
    USB usb = 1;
    // For SSH communications over TCP.
    SSH ssh = 2;
    // Only one ADB connection, no underlying USB connection information is
    // provided.
    ADB adb = 3;
    // The ADB and USB connection comes from the same hardware cable.
    ADBOverUSB adb_over_usb = 4;
    // For video device.
    VIDEO video = 5;
  }
}

message CommunicationList {
  repeated Communication communication = 1;
}
