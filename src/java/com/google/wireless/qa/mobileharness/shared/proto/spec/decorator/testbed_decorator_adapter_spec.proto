/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto2";

package mobileharness.shared.spec;

import "src/java/com/google/wireless/qa/mobileharness/shared/proto/common.proto";
import "src/java/com/google/wireless/qa/mobileharness/shared/proto/spec/base_spec.proto";

option java_package = "com.google.wireless.qa.mobileharness.shared.proto.spec.decorator";
option java_multiple_files = true;

message SubDeviceJobSpec {
  message FileSpec {
    optional string tag = 1;
    repeated string files = 2 [(file_detail) = {
      help: "arbitrary extra files to supply to the subdecorator stack."
    }];
    repeated Google3File g3_files = 3;
  }

  message ParamSpec {
    optional string name = 1;
    optional string value = 2;
  }

  repeated string decorator = 1;
  repeated FileSpec files = 2;
  repeated ParamSpec params = 3;
}

message DeviceSelector {
  // For backwards compadability with the Mobly definition.
  optional string device_label = 1;
  // The structure of this should match that of the linked proto.
  // LINT.IfChange
  // Device type name.
  optional string type_name = 2;
  // A subdevice dimensions specification. Uses old format for compadability.
  repeated StrPair dimensions = 3;
  // LINT.ThenChange(
  //   //depot/google3/java/com/google/wireless/qa/mobileharness/shared/proto/job_config.proto
  // )

  // Match a sub device by its id.
  optional string sub_device_id = 4;
}

message DeviceToJobSpec {
  optional DeviceSelector device_selector = 1;
  optional SubDeviceJobSpec job_spec = 2;
}

// Specs for TestbedDecoratorAdapter.
message TestbedDecoratorAdapterSpec {
  extend DecoratorSpec {
    optional TestbedDecoratorAdapterSpec ext = 144657321;
  }
  repeated DeviceToJobSpec device_to_job_spec = 1 [(field_detail) = {
    help: "The decorator stack and parameters to run on each subdevice."
  }];
}
