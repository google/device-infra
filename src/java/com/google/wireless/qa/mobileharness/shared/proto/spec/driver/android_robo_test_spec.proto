/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto2";

package mobileharness.shared.spec;

import "src/java/com/google/wireless/qa/mobileharness/shared/proto/spec/base_spec.proto";

option java_package = "com.google.wireless.qa.mobileharness.shared.proto.spec.driver";
option java_multiple_files = true;

// Spec for AndroidRoboTest driver.
message AndroidRoboTestSpec {
  extend DriverSpec {
    optional AndroidRoboTestSpec ext = 71151824;
  }

  optional string crawler_apk = 2 [(file_detail) = {
    is_required: true
    help: "The crawler apk, which contains the base crawler apk."
  }];

  optional string crawler_stub_apk = 3 [(file_detail) = {
    is_required: true
    help: "The crawler stub apk, which is necessary for UI Automator mode based crawling."
  }];

  optional string app_package_id = 4 [(field_detail) = {
    is_required: true
    help: "Package ID of the app to crawl."
  }];

  optional string crawler_package_id = 5
      [(field_detail) = { help: "Package ID of the crawler app." }];

  optional string stub_app_package_id = 6
      [(field_detail) = { help: "Package ID of the crawler app." }];

  enum ControllerEndpoint {
    CONTROLLER_ENDPOINT_UNSPECIFIED = 0;
    AUTOPUSH = 1;
    PROD = 2;
  }

  optional ControllerEndpoint controller_endpoint = 7
      [(field_detail) = { help: "Crawler service controller endpoint." }];

  optional int32 crawl_timeout_secs = 9
      [(field_detail) = { help: "Timeout of the crawl in seconds." }];

  enum RoboscriptRecorder {
    NONE = 0;
    TEXT = 1;
    WEB = 2;
  }

  optional RoboscriptRecorder roboscript_recorder = 10
      [(field_detail) = { help: "Roboscript recorder type." }, default = NONE];

  optional bool record_crawl = 11 [(field_detail) = { help: "Record crawl." }];

  repeated string crawler_flags = 12
      [(field_detail) = { help: "Crawler flags. Example flag1=value1." }];

  optional string robo_config_proto = 13
      [(file_detail) = { help: "Robo config binary proto." }];

  optional string crawl_guidance_proto = 14
      [(file_detail) = { help: "Crawl guidance binary proto." }];

  repeated string crawler_assets = 15 [(file_detail) = {
    help: "Crawler assets. Robo script and contextual robo script files."
  }];

  optional bool unpack_per_screen_screenshots = 16 [(field_detail) = {
    help: "Unpack screenshots named #.png where # is the screen ID."
  }];

  optional bool unpack_per_action_screenshots = 17 [(field_detail) = {
    help: "Unpack screenshots named action#.png where # is the action sequence."
  }];

  optional bool erase_robo_results_screenshots = 18
      [(field_detail) = { help: "Erase screenshots in robo results." }];

  optional bool unpack_ai_artifacts = 19
      [(field_detail) = { help: "Unpack artifacts generated by AI agents." }];

  optional bool erase_ai_artifacts = 20 [(field_detail) = {
    help: "Erase AI agent artifact file blobs in robo results."
  }];

  optional string product_name = 21 [(field_detail) = {
    help: "Name of the product, whose client invoked this test."
  }];

  optional string downstream_client = 22 [
    (field_detail) = { help: "The downstream client that invoked this test." }
  ];

  reserved 1;
}
