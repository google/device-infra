/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package deviceinfra.daemon.health;

import "google/protobuf/duration.proto";

option java_package = "com.google.devtools.deviceinfra.host.daemon.health.proto";
option java_outer_classname = "HealthProto";

// Serving status of a server.
enum ServingStatus {
  // Server is down or not able to reach.
  UNREACHABLE = 0;

  // Server is up and ready to serve.
  SERVICING = 1;

  // Server is draining and wating for task to be finished.
  DRAINING = 2;

  // Server is drained and not open for serving.
  DRAINED = 3;
}

message CheckStatusRequest {
  // Empty now but may be extended.
}

message CheckStatusResponse {
  ServingStatus status = 1;
}

message DrainServerRequest {
  // Optional. Timeout for drain server. If not provided, server will decide its
  // timeout by itself.
  google.protobuf.Duration timeout = 1;
}

message DrainServerResponse {
  // Required. Drain request has been received by server.
  bool acknowledged = 1;
}

service Health {
  // Check the status of binded server.
  rpc Check(CheckStatusRequest) returns (CheckStatusResponse) {}

  // Asynchronously drain the server.
  // After this call, periodically check the status until server status reached
  // to DRAINED
  rpc Drain(DrainServerRequest) returns (DrainServerResponse) {}
}
