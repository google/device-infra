/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package mobileharness.api.query;

option java_package = "com.google.devtools.mobileharness.api.query.proto";
option java_outer_classname = "FilterProto";

// Lab filter for filtering labs and their devices from result.
//
// A lab and its devices will appear in the result if the lab matches ALL
// lab_match_condition.
message LabFilter {
  // Condition to match a lab.
  message LabMatchCondition {
    // Condition to match host name of a lab.
    message LabHostNameMatchCondition {
      StringMatchCondition condition = 1;
    }

    // Condition to match the property of a lab.
    message PropertyMatchCondition {
      StringMultimapMatchCondition condition = 1;
    }

    // An unset or unrecognized condition will always match.
    oneof condition {
      LabHostNameMatchCondition lab_host_name_match_condition = 1;
      PropertyMatchCondition property_match_condition = 2;
    }
  }

  repeated LabMatchCondition lab_match_condition = 1;
}

// Device filter for filter devices from result.
//
// A device will appear in the result if the device matches ALL
// device_match_condition AND its lab matches ALL lab_match_condition.
message DeviceFilter {
  // Condition to match a device.
  message DeviceMatchCondition {
    // Condition to match UUID of a device.
    message DeviceUuidMatchCondition {
      StringMatchCondition condition = 1;
    }

    // Condition to match the host name of a device.
    // This is used for filtering the devices from a specific host.
    message HostNameMatchCondition {
      StringMatchCondition condition = 1;
    }

    // Condition to match the dimension of a device.
    message StatusMatchCondition {
      StringMatchCondition condition = 1;
    }

    // Condition to match the dimension of a device.
    message TypeMatchCondition {
      StringListMatchCondition condition = 1;
    }

    // Condition to match the owner of a device.
    message OwnerMatchCondition {
      StringListMatchCondition condition = 1;
    }

    // Condition to match the executor of a device.
    message ExecutorMatchCondition {
      StringListMatchCondition condition = 1;
    }

    // Condition to match the driver of a device.
    message DriverMatchCondition {
      StringListMatchCondition condition = 1;
    }

    // Condition to match the decorator of a device.
    message DecoratorMatchCondition {
      StringListMatchCondition condition = 1;
    }

    // Condition to match the dimension of a device.
    message DimensionMatchCondition {
      StringMultimapMatchCondition condition = 1;
    }

    // An unset or unrecognized condition will always match.
    oneof condition {
      DeviceUuidMatchCondition device_uuid_match_condition = 1;
      StatusMatchCondition status_match_condition = 2;
      TypeMatchCondition type_match_condition = 3;
      OwnerMatchCondition owner_match_condition = 4;
      DriverMatchCondition driver_match_condition = 5;
      DecoratorMatchCondition decorator_match_condition = 6;
      DimensionMatchCondition dimension_match_condition = 7;
      ExecutorMatchCondition executor_match_condition = 8;
      HostNameMatchCondition host_name_match_condition = 9;
    }
  }

  repeated DeviceMatchCondition device_match_condition = 2;
}

// Condition to match a string multi-map attribute.
message StringMultimapMatchCondition {
  // Required. The key (case-insensitive). Need exact value, e.g. "pool".
  string key = 1;
  // Required. The value list.
  StringListMatchCondition value_condition = 2;
}

// Condition to match a string attribute.
message StringMatchCondition {
  // A string matches this condition if it is in the list of expected
  // values (case-insensitive).
  //
  // An empty list will match nothing.
  message Include {
    repeated string expected = 1;
  }

  // A string matches this condition if it matches the given regex.
  //
  // An invalid regex will match nothing.
  message MatchesRegex {
    string regex = 1;
  }

  // A string matches this condition if it is not in the list of unexpected
  // values (case-insensitive).
  message Exclude {
    repeated string value = 1;
  }

  // A string matches this condition if it does not match the given regex.
  //
  // An invalid regex will match everything.
  message DoesNotMatchRegex {
    string regex = 1;
  }

  // A string matches this condition if it contains the given substring
  // (case-insensitive).
  message Contains {
    string substring = 1;
  }

  // A string matches this condition if it does not contain the given substring
  // (case-insensitive).
  message DoesNotContain {
    string substring = 1;
  }

  // An unset or unrecognized condition will always match.
  oneof condition {
    Include include = 1;
    MatchesRegex matches_regex = 2;
    Exclude exclude = 3;
    DoesNotMatchRegex does_not_match_regex = 4;
    Contains contains = 5;
    DoesNotContain does_not_contain = 6;
  }
}

// Conditions to match string list attributeã€‚
message StringListMatchCondition {
  // A string list matches this condition if it contains at least one string
  // that matches the given condition.
  message AnyMatch {
    StringMatchCondition condition = 1;
  }

  // A string list matches this condition if it contains no string that matches
  // the given condition.
  message NoneMatch {
    StringMatchCondition condition = 1;
  }

  // A string list matches this condition if it contains all the given strings
  // (case-insensitive) as the given list. Regex is not supported.
  //
  // If the expected value list is empty, the condition will always match. The
  // expected list will be converted to a set, so allow duplicate values.
  message SubsetMatch {
    repeated string expected = 1;
  }

  // A string list matches this condition if it contains exactly the given
  // values (case-insensitive). Regex is not supported.
  //
  // The expected value list and the actual value list will be converted to a
  // set, so duplicate values will be ignored.
  message ExactMatch {
    repeated string value = 1;
  }

  // An unset or unrecognized condition will always match.
  oneof condition {
    AnyMatch any_match = 1;
    NoneMatch none_match = 2;
    SubsetMatch subset_match = 3;
    IntegerMatch length_match = 4;
    ExactMatch exact_match = 5;
  }
}

// Condition to match an integer attribute.
message IntegerMatch {
  // The integer matches this condition if it is equal to the given value.
  message Equal {
    int32 value = 1;
  }

  // The integer matches this condition if it is greater than or equal to the
  // given value.
  message GreaterThanOrEqual {
    int32 min_value = 1;
  }

  // An unset or unrecognized condition will always match.
  oneof condition {
    Equal equal = 1;
    GreaterThanOrEqual greater_than_or_equal = 2;
  }
}
