/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package mobileharness.api.query;

import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "src/devtools/mobileharness/api/model/proto/device.proto";
import "src/devtools/mobileharness/api/model/proto/lab.proto";
import "src/devtools/mobileharness/api/query/proto/filter.proto";

option java_package = "com.google.devtools.mobileharness.api.query.proto";
option java_outer_classname = "LabQueryProto";

// A query for querying information of labs and devices.
message LabQuery {
  // Filter for filtering labs/devices from result.
  message Filter {
    // Optional.
    LabFilter lab_filter = 1;

    // Optional.
    DeviceFilter device_filter = 2;
  }

  // Optional.
  //
  // If not present, returns all labs/devices.
  Filter filter = 1;

  // Mask for removing fields/dimensions from a lab/device.
  message Mask {
    // Mask for mobileharness.api.query.LabInfo.
    //
    // If all fields are removed, LabInfo won't be in result.
    message LabInfoMask {
      // Field mask of `mobileharness.api.query.proto.LabQueryProto.LabInfo`.
      //
      // If LabInfoMask is not set, returns all fields of LabInfo.
      //
      // If LabInfoMask is set but field_mask is not set, returns all fields of
      // LabInfo.
      //
      // If LabInfoMask is set but field_mask is empty, returns result without
      // LabInfo.
      //
      // If field_mask is not empty, returns result with trimmed LabInfo.
      google.protobuf.FieldMask field_mask = 1;
    }

    // Optional.
    //
    // If not present, returns all fields of LabInfo.
    LabInfoMask lab_info_mask = 1;

    // Mask for mobileharness.api.query.DeviceInfo.
    message DeviceInfoMask {
      // Field mask of `mobileharness.api.query.proto.LabQueryProto.DeviceInfo`.
      //
      // If DeviceInfoMask is not set, returns all fields of DeviceInfo.
      //
      // If DeviceInfoMask is set but field_mask is not set, returns all fields
      // of DeviceInfo.
      //
      // If DeviceInfoMask is set but field_mask is empty, returns result
      // without DeviceInfo.
      //
      // If field_mask is not empty, returns result with trimmed DeviceInfo.
      google.protobuf.FieldMask field_mask = 1;

      message DimensionsMask {
        repeated string dimension_names = 1;
      }

      // Optional.
      //
      // If the mask is not present or dimension_names is empty, returns all
      // supported dimensions in DeviceInfo.
      //
      // If `device_feature.composite_dimension.supported_dimension` is not in
      // `field_mask`, `supported_dimensions_mask` is ignored as there are no
      // supported dimensions to return.
      DimensionsMask supported_dimensions_mask = 3;

      // Optional.
      //
      // If the mask is not present or dimension_names is empty, returns all
      // required dimensions in DeviceInfo.
      //
      // If `device_feature.composite_dimension.required_dimension` is not in
      // `field_mask`, `required_dimensions_mask` is ignored as there are no
      // required dimensions to return.
      DimensionsMask required_dimensions_mask = 4;

      reserved 2;
    }

    // Optional.
    //
    // If not present, returns all fields of DeviceInfo.
    DeviceInfoMask device_info_mask = 2;
  }

  // Optional.
  //
  // If not present, returns all fields of LabInfo/DeviceInfo.
  Mask mask = 2;

  // Order of labs/devices in result.
  message Order {
    message LabOrder {
      // TODO: Supports lab order.
    }

    // Optional.
    LabOrder lab_order = 1;

    message DeviceOrder {
      // TODO: Supports device order.
    }

    // Optional.
    DeviceOrder device_order = 2;
  }

  // Optional.
  //
  // If not present, uses the default lab/device order.
  Order order = 3;

  // Results will be grouped as a lab->device tree.
  message LabViewRequest {}

  // Results will be grouped as a device group tree.
  //
  // In the tree, a leaf node is a device list. Each element in
  // device_group_operation will add a layer to the tree, and a non-leaf node is
  // a group operation result.
  //
  // If no group operation, the tree will only contain one node (a DeviceList).
  message DeviceViewRequest {
    message DeviceGroupCondition {
      // TODO: Supports more group conditions, e.g., composite
      // condition, dimension value set.

      // Each group represents a single dimension value X. A device appears in
      // the group if its dimensions multimap contains <dimension_name, X>.
      //
      // A device may appear in multiple groups.
      message SingleDimensionValue {
        // Required.
        string dimension_name = 1;
      }

      // Each group represents a list of dimension values for a dimension name.
      // A device appears in the group if the list of its dimension values for
      // the dimension name is equal to the list (order-insensitive).
      //
      // A device only appears in one group.
      message DimensionValueList {
        // Required.
        string dimension_name = 1;
      }

      // Each group represents a list of types.
      // A device appears in the group if the list of its types is equal to the
      // list (order-insensitive).
      //
      // A device only appears in one group.
      message TypeList {}

      // Each group represents a list of owners.
      // A device appears in the group if the list of its owners is equal to the
      // list (order-insensitive).
      //
      // A device only appears in one group.
      message OwnerList {}

      // Each group represents a list of executors.
      // A device appears in the group if the list of its executors is equal to
      // the list (order-insensitive).
      //
      // A device only appears in one group.
      message ExecutorList {}

      // Each group represents a single status.
      // A device appears in the group if its status is equal to the status.
      //
      // A device only has one status so only appears in one group.
      message SingleStatus {}

      oneof condition {
        SingleDimensionValue single_dimension_value = 1;
        DimensionValueList dimension_value_list = 2;
        TypeList type_list = 3;
        OwnerList owner_list = 4;
        ExecutorList executor_list = 5;
        SingleStatus single_status = 6;
      }
    }

    message DeviceGroupOperation {
      // Required.
      DeviceGroupCondition device_group_condition = 1;

      // Optional.
      //
      // Limit of groups in a group result.
      //
      // O to represent no limit.
      int32 group_limit = 2;
    }

    // Optional.
    //
    // Groups devices by the first request, then groups devices in each group by
    // the second request, etc.
    repeated DeviceGroupOperation device_group_operation = 1;

    // Optional.
    //
    // Limit of devices in a DeviceList (of a group, or of the whole result if
    // no group operation).
    //
    // O to represent no limit.
    int32 device_limit = 2;
  }

  // How labs/devices are grouped in result.
  //
  // If not present, uses lab_view_request.
  oneof view_request {
    LabViewRequest lab_view_request = 4;
    DeviceViewRequest device_view_request = 5;
  }
}

// Paging information to return a sub list of the result.
//
// For a lab->device tree or a device group tree, the page information is
// applied to the top level repeated elements.
message Page {
  // Required.
  int32 offset = 1;

  // Required.
  //
  // 0 to represent no limit.
  int32 limit = 2;
}

// Result of a lab query.
message LabQueryResult {
  // Required.
  //
  // Timestamp when the result snapshot is generated.
  google.protobuf.Timestamp timestamp = 1;

  message LabView {
    // Required.
    repeated LabData lab_data = 1;

    // Required.
    //
    // Lab count regardless of Page setting. It may be larger than the size of
    // lab_data.
    int32 lab_total_count = 2;
  }

  message DeviceView {
    // Required.
    GroupedDevices grouped_devices = 1;
  }

  oneof view {
    // Required if lab_view_request is present.
    LabView lab_view = 2;

    // Required if device_view_request is present.
    DeviceView device_view = 3;
  }
}

message LabData {
  // Required.
  LabInfo lab_info = 1;

  // Required.
  DeviceList device_list = 2;
}

// All information of a lab server.
message LabInfo {
  // Optional.
  mobileharness.api.model.LabLocator lab_locator = 1;

  // Optional.
  mobileharness.api.model.LabServerSetting lab_server_setting = 2;

  // Optional.
  mobileharness.api.model.LabServerFeature lab_server_feature = 3;

  // Optional.
  mobileharness.api.model.LabStatus lab_status = 4;

  // TODO: Adds more fields.
}

// All information of a device.
message DeviceInfo {
  // Optional.
  mobileharness.api.model.DeviceLocator device_locator = 1;

  reserved 2;

  // Optional.
  mobileharness.api.model.DeviceStatus device_status = 3;

  // Optional.
  mobileharness.api.model.DeviceFeature device_feature = 4;

  // TODO: Adds more fields.
}

message GroupedDevices {
  oneof type {
    // Devices in a plain list.
    DeviceList device_list = 1;

    // Devices are grouped by a group operation.
    DeviceGroupResult device_group_result = 2;
  }
}

message DeviceList {
  // Required.
  //
  // Device count regardless of Page setting and device_limit setting.
  int32 device_total_count = 1;

  // Required.
  repeated DeviceInfo device_info = 2;
}

message DeviceGroupResult {
  // Required.
  //
  // Device group count regardless of Page setting and group_limit setting.
  int32 device_group_total_count = 1;

  // Required.
  repeated DeviceGroup device_group = 2;

  // Required.
  LabQuery.DeviceViewRequest.DeviceGroupOperation device_group_operation = 3;
}

message DeviceGroup {
  // Required.
  DeviceGroupKey device_group_key = 1;

  // Required.
  GroupedDevices grouped_devices = 2;
}

message DeviceGroupKey {
  // TODO: Supports more group conditions.

  // Devices in the group have a dimensions multimap containing <dimension_name,
  // dimension_value> or not containing dimension_name.
  message HasDimensionValue {
    // Required.
    string dimension_name = 1;

    message NoDimensionValue {}

    oneof type {
      string dimension_value = 2;
      NoDimensionValue no_dimension_value = 3;
    }
  }

  // Devices in the group have a list of dimension values for a dimension name.
  // If a device does not have the specified dimension name, its corresponding
  // dimension values list is empty.
  message HasDimensionValueList {
    // Required.
    string dimension_name = 1;
    // If empty, Devices in the group do not have the specified dimension name
    // or have empty dimension values list.
    repeated string dimension_values = 2;
  }

  // Devices in the group have a list of types.
  // If a device does not have any type, its corresponding type list is empty.
  message HasTypeList {
    repeated string types = 1;
  }

  // Devices in the group have a list of owners.
  // If a device does not have any owner, its corresponding owner list is empty.
  message HasOwnerList {
    repeated string owners = 1;
  }

  // Devices in the group have a list of executors.
  // If a device does not have any executor, its corresponding executor list is
  // empty.
  message HasExecutorList {
    repeated string executors = 1;
  }

  // Devices in the group have a single status.
  message HasStatus {
    mobileharness.api.model.DeviceStatus status = 1;
  }

  oneof key {
    // Required if single_dimension_value is present.
    HasDimensionValue has_dimension_value = 1;
    // Required if dimension_value_list is present.
    HasDimensionValueList has_dimension_value_list = 2;
    // Required if type_list is present.
    HasTypeList has_type_list = 3;
    // Required if owner_list is present.
    HasOwnerList has_owner_list = 4;
    // Required if executor_list is present.
    HasExecutorList has_executor_list = 5;
    // Required if single_status_value is present.
    HasStatus has_status = 6;
  }
}
