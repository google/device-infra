/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package mobileharness.infra.client.longrunningservice;

import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
import "src/devtools/common/metrics/stability/model/proto/exception.proto";

option java_package = "com.google.devtools.mobileharness.infra.client.longrunningservice.proto";
option java_outer_classname = "SessionProto";

message SessionId {
  // Required.
  string id = 1;
}

enum SessionStatus {
  SESSION_STATUS_UNSPECIFIED = 0;

  // The session has been submitted to the session queue but has not started.
  SESSION_SUBMITTED = 100;

  // The session is running.
  SESSION_RUNNING = 200;

  // The session has finished (successfully or unsuccessfully).
  SESSION_FINISHED = 300;
}

// Configuration of a session.
message SessionConfig {
  // Required.
  string session_name = 1;

  // Session properties specified by the session config.
  map<string, string> session_property = 2;

  // Optional.
  SessionPluginConfigs session_plugin_configs = 3;

  // Optional.
  //
  // Whether to remove the session from the server after the session finishes.
  // False by default.
  //
  // If true, the final result of the session only appears in the response of
  // the RunSession method.
  bool remove_after_finish = 4;
}

// Configuration of session plugins.
message SessionPluginConfigs {
  repeated SessionPluginConfig session_plugin_config = 1;
}

// Configuration of a session plugin.
//
// A session plugin is a Java class, which contains @Subscribe methods receiving
// session events and OmniLab job / test events.
//
// Session events include:
//
// 1. SessionStartingEvent.
// 2. SessionStartedEvent.
// 3. SessionEndedEvent. (SessionStartingEvent and SessionEndedEvent will be
// called both or neither)
//
// A session plugin can have an @Inject constructor. These types will be bound
// automatically:
//
// 1. SessionInfo.
// 2. DeviceQuerier.
// 3. @ServerStartTime java.time.Instant.
// 4. ListeningExecutorService.
// 5. java.time.Clock.
// 6. @SessionTempDir Path.
// 7. @SessionGenDir Path.
// 8. LocalSessionStub.
message SessionPluginConfig {
  // Required.
  SessionPluginLoadingConfig loading_config = 1;

  // Optional.
  SessionPluginExecutionConfig execution_config = 2;

  // Optional.
  //
  // If set, the label of the session plugin will be the value of this field.
  // Otherwise, the label of the session plugin will be its full class name.
  //
  // Each session plugin in a session must have a unique label.
  SessionPluginLabel explicit_label = 3;
}

// Label of a session plugin.
//
// If SessionPluginConfig.explicit_label is set, the label of the session plugin
// will be the value of this field. Otherwise, the label of the session plugin
// will be its full class name.
//
// Each session plugin in a session must have a unique label.
message SessionPluginLabel {
  string label = 1;
}

// Config about loading a session plugin.
//
// Currently only supports builtin session plugin, whose Java class needs to be
// included in the JAR of the server (e.g., by runtime_deps).
message SessionPluginLoadingConfig {
  // Required.
  //
  // Full class name of the session plugin.
  string plugin_class_name = 1;

  // Optional.
  //
  // Full class name of the Module class of the session plugin.
  string plugin_module_class_name = 2;
}

// Config provided to the @Inject constructor of a session plugin.
message SessionPluginExecutionConfig {
  // Required.
  google.protobuf.Any config = 1;
}

message SessionOutput {
  // Properties of the session.
  map<string, string> session_property = 1;

  repeated SessionPluginError session_plugin_error = 2;

  // SessionPluginOutput by session plugin labels.
  //
  // A plugin can set its output by SessionInfo.setSessionPluginOutput().
  //
  // A plugin may not set its output, which needs to check by the client side.
  map<string, SessionPluginOutput> session_plugin_output = 3;

  // Required.
  SessionTimingInfo session_timing_info = 4;
}

// An exception thrown from a session plugin.
message SessionPluginError {
  // Required.
  SessionPluginLabel plugin_label = 1;

  // Required.
  string plugin_class_name = 2;

  // Required.
  string method_name = 3;

  // Required.
  string event_class_name = 4;

  // Required.
  int32 plugin_identity_hash_code = 5;

  // Required.
  stability.model.ExceptionDetail error = 6;
}

// Output message (if any) of a session plugin.
//
// A plugin can set its output by SessionInfo.setSessionPluginOutput().
message SessionPluginOutput {
  // Optional.
  google.protobuf.Any output = 1;
}

// Timing information of a session.
message SessionTimingInfo {
  // Required.
  google.protobuf.Timestamp session_submitted_time = 1;
}

message SessionDetail {
  // Required.
  SessionId session_id = 1;

  // Required.
  SessionStatus session_status = 2;

  // Required.
  SessionConfig session_config = 3;

  // Required.
  SessionOutput session_output = 4;

  // Optional.
  //
  // Exception thrown from the session runner (if necessary).
  stability.model.ExceptionDetail session_runner_error = 5;
}

// Notification to a pending/running session.
message SessionNotification {
  // Optional.
  //
  // The plugin to receive the notification.
  //
  // If empty, all plugins of the session will receive the notification.
  SessionPluginLabel plugin_label = 1;

  // Required.
  google.protobuf.Any notification = 2;
}
