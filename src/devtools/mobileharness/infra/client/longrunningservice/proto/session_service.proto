/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package mobileharness.infra.client.longrunningservice;

import "google/protobuf/field_mask.proto";
import "src/devtools/mobileharness/infra/client/longrunningservice/proto/session.proto";

option java_package = "com.google.devtools.mobileharness.infra.client.longrunningservice.proto";
option java_outer_classname = "SessionServiceProto";

// Session service for submitting and running sessions. A session contains
// multiple OmniLab jobs.
service SessionService {
  // Creates a session and returns immediately.
  rpc CreateSession(CreateSessionRequest) returns (CreateSessionResponse);

  // Creates a session and returns when the session finishes.
  rpc RunSession(RunSessionRequest) returns (RunSessionResponse);

  // Gets information of a session.
  rpc GetSession(GetSessionRequest) returns (GetSessionResponse);

  // Gets information of all pending/running/archived sessions.
  rpc GetAllSessions(GetAllSessionsRequest) returns (GetAllSessionsResponse);

  // Subscribes a session.
  rpc SubscribeSession(stream SubscribeSessionRequest)
      returns (stream SubscribeSessionResponse);

  // Notifies a pending/running session asynchronously.
  rpc NotifySession(NotifySessionRequest) returns (NotifySessionResponse);

  // Notifies all pending/running sessions asynchronously.
  rpc NotifyAllSessions(NotifyAllSessionsRequest)
      returns (NotifyAllSessionsResponse);

  // Aborts sessions.
  //
  // If a session has not started, it will not be started.
  //
  // If a session is running, and no more jobs will be started and all
  // running jobs will be killed. Session plugins will still be executed.
  //
  // If a session has ended, nothing will happen.
  //
  // If all pending/running sessions have been aborted, then the server will
  // exit when it receives ControlService.KillServer() rpc.
  rpc AbortSessions(AbortSessionsRequest) returns (AbortSessionsResponse);

  // Gets the status of the session manager.
  rpc GetSessionManagerStatus(GetSessionManagerStatusRequest)
      returns (GetSessionManagerStatusResponse);
}

message CreateSessionRequest {
  // Required.
  SessionConfig session_config = 1;
}

message CreateSessionResponse {
  // Required.
  SessionId session_id = 1;
}

message RunSessionRequest {
  // Required.
  SessionConfig session_config = 1;
}

message RunSessionResponse {
  // Required.
  SessionDetail session_detail = 1;
}

message GetSessionRequest {
  // Required.
  SessionId session_id = 1;

  // Optional.
  //
  // Field mask of GetSessionResponse.
  //
  // For example, a mask ["session_detail.session_status"] makes the response
  // only contains SessionStatus.
  //
  // If not present, the response contains all fields.
  //
  // Note that a repeated field is allowed ONLY IF it is the LAST item in a
  // path.
  google.protobuf.FieldMask field_mask = 2;
}

message GetSessionResponse {
  // Required.
  SessionDetail session_detail = 1;
}

message GetAllSessionsRequest {
  // Optional.
  //
  // Field mask of SessionDetail.
  //
  // For example, a mask ["session_status"] makes all SessionDetail in the
  // response only contain SessionStatus.
  //
  // If not present, SessionDetail in the response contains all fields.
  //
  // Note that a repeated field is allowed ONLY IF it is the LAST item in a
  // path.
  google.protobuf.FieldMask session_detail_field_mask = 1;

  // Optional.
  SessionFilter session_filter = 2;
}

message GetAllSessionsResponse {
  // Required.
  repeated SessionDetail session_detail = 1;
}

// Gets information of a session when this method is called or when the
// SessionDetail is modified, until the request stream completes.
//
// The second and the following requests in a stream will be discarded.
message SubscribeSessionRequest {
  // Required.
  GetSessionRequest get_session_request = 1;
}

message SubscribeSessionResponse {
  // Required.
  GetSessionResponse get_session_response = 1;
}

// Notifies a pending/running session asynchronously.
//
// If the session is not found or has finished, returns immediately.
//
// If the session is pending or has not created session plugins, the
// notification will be sent after session plugins are created and before
// SessionStartingEvent is posted.
message NotifySessionRequest {
  // Required.
  SessionId session_id = 1;

  // Required.
  SessionNotification session_notification = 2;
}

message NotifySessionResponse {
  // True if the pending/running session is found and the notification will be
  // sent. False if the session is not found or has finished.
  bool successful = 1;
}

// Notifies all pending/running session asynchronously.
//
// If a session is not found or has finished, returns immediately.
//
// If a session is pending or has not created session plugins, the
// notification will be sent after session plugins are created and before
// SessionStartingEvent is posted.
message NotifyAllSessionsRequest {
  // Optional.
  //
  // A list of session ids to be notified.
  //
  // If empty, other fields will filter all sessions instead of no sessions.
  repeated SessionId session_id = 1;

  // Optional.
  //
  // Filters to filter sessions.
  SessionFilter session_filter = 2;

  // Required.
  SessionNotification session_notification = 3;
}

message NotifyAllSessionsResponse {
  // Required.
  //
  // A list of pending/running session ids that are notified.
  repeated SessionId session_id = 1;
}

// A request to abort sessions. If all fields are empty, no sessions will be
// aborted.
message AbortSessionsRequest {
  // Optional.
  //
  // A list of session ids to be aborted.
  //
  // If empty, other fields will filter all sessions instead of no sessions.
  repeated SessionId session_id = 1;

  // Optional.
  //
  // Filters to filter sessions and abort.
  SessionFilter session_filter = 2;
}

message AbortSessionsResponse {
  // Required.
  //
  // A list of session ids that are aborted.
  repeated SessionId session_id = 1;
}

message SessionFilter {
  // Optional.
  //
  // Matches SessionDetail.session_config.session_name of sessions.
  //
  // An invalid regex will be treated as not present.
  string session_name_regex = 1;

  // Optional.
  //
  // Matches SessionDetail.session_status.name() of sessions.
  //
  // An invalid regex will be treated as not present.
  string session_status_name_regex = 2;

  // Optional.
  //
  // Matches a SessionDetail if its session_output.session_property doesn't
  // contain a key that is in the list.
  repeated string excluded_session_property_key = 3;

  // TODO: Remove this field and clean up its usage.
  // Optional.
  //
  // Matches a SessionDetail if the map is a sub map of
  // session_config.session_property.
  map<string, string> included_session_config_property = 4;

  // Optional.
  //
  // Matches a SessionDetail if the map is a sub map of
  // session_output.session_property.
  map<string, string> included_session_property = 5;
}

message GetSessionManagerStatusRequest {}

message GetSessionManagerStatusResponse {
  SessionManagerStatus session_manager_status = 1;
}
