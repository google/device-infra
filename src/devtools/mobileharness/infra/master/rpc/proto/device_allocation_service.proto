/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package devtools.mobileharness.infra.master.rpc.proto;

import "google/protobuf/duration.proto";
import "src/devtools/deviceinfra/api/deviceinfo/proto/device_locator.proto";
import "src/devtools/deviceinfra/api/deviceinfo/proto/device_requirement.proto";
import "src/devtools/mobileharness/api/model/proto/test.proto";
import "src/devtools/mobileharness/api/query/proto/device_query.proto";

option java_package = "com.google.devtools.mobileharness.infra.master.rpc.proto";
option java_outer_classname = "DeviceAllocationServiceProto";

// A request to allocate devices
message AllocationRequest {
  // The Scheduler defined id. Useful for searching in analog.
  string schedule_id = 1;

  // The devices that should be allocated.
  // Required.
  repeated .deviceinfra.api.deviceinfo.DeviceRequirements device_requirements =
      2;

  // The maximum amount of time that this allocation will last for.
  // Required.
  google.protobuf.Duration lease_time = 3;

  // The locator of the test, it's only used for tracking and debugging.
  .mobileharness.api.model.TestLocator test_locator = 4;
}

// A response from requesting that devices ware allocated. The response contains
// either the details of an allocated device or an error with details about why
// allocation failed (e.g. no devices were available)
message AllocationResponse {
  oneof response {
    // The information about the device that was allocated.
    AllocationDetails details = 1;

    // An error happened when allocating.
    AllocationError error = 2;
  }
}

// The information about the devices that were allocated
message AllocationDetails {
  // The session ID from the successful allocation.
  string session_id = 1;

  // The devices that ware allocated.
  repeated .deviceinfra.api.deviceinfo.DeviceLocator allocated_device = 2;
}

message AllocationError {
  AllocationErrorType type = 1;

  enum AllocationErrorType {
    ALLOCATION_ERROR_TYPE_UNSPECIFIED = 0;
    // No devices are currently available that match the given criteria.
    NONE_AVAILABLE = 1;
    // No devices exist that match the given criteria.
    NONE_EXIST = 2;
  }
}

// The request that should be sent for deallocating devices. It only consists of
// the session ID that was created when allocating devices.
message DeallocationRequest {
  // The session ID that was returned from the AllocationResponse
  string session_id = 1;
}

// An empty message that is returned in the event that deallocation was
// successful. Deallocation should always succeed unless the Master server has
// some sort of RPC error (e.g. in the case that the allocation was not found).
message DeallocationResponse {}

message Condition {
  repeated string contains_all = 1;
  repeated string not_contains_any = 2;
}

// An empty request message.
message GetAvailableDevicesRequest {
  Condition device_type_condition = 1;
}

// The information of available satellite devices.
message GetAvailableDevicesResponse {
  repeated .mobileharness.shared.query.DeviceInfo device_info = 1;
}

// Service for allocating/deallocating devices from Master>
service DeviceAllocationService {
  // Allocates devices. This call blocks until devices are successfully
  // allocated.
  rpc Allocate(AllocationRequest) returns (AllocationResponse) {}

  // Deallocates devices. This call should always be succeed.
  rpc Deallocate(DeallocationRequest) returns (DeallocationResponse) {}

  // Gets the available devices(IDLE + satellite lab).
  rpc GetAvailableDevices(GetAvailableDevicesRequest)
      returns (GetAvailableDevicesResponse) {}
}
