/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package mobileharness.infra.master.rpc;

import "google/protobuf/duration.proto";
import "src/devtools/common/metrics/stability/model/proto/exception.proto";
import "src/devtools/mobileharness/api/model/proto/device.proto";
import "src/devtools/mobileharness/api/model/proto/lab.proto";
import "src/devtools/mobileharness/shared/version/proto/version.proto";

option java_package = "com.google.devtools.mobileharness.infra.master.rpc.proto";
option java_outer_classname = "LabSyncServiceProto";

message SignUpLabRequest {
  // Required: version information for checking the compatibility of the Master
  // and Lab Server.
  mobileharness.shared.version.VersionCheckRequest version_check_request = 1;

  // Optional: If Lab Server only detects one IP, it will report it and Master
  // will respect it, in case Master detects the wrong IP after the traffic goes
  // thought OnePlatform(b/32630821).
  string lab_ip = 2;

  // Required.
  string lab_host_name = 3;

  // Required.
  mobileharness.api.model.LabServerSetting lab_server_setting = 4;

  message Device {
    // Required.
    string control_id = 1;

    // Required: Lab Server side timestamp.
    int64 timestamp_ms = 2;

    // Required: Device status on Lab Server side.
    mobileharness.api.model.DeviceStatus status = 3;

    // Required.
    mobileharness.api.model.DeviceFeature feature = 4;

    // Required.
    string uuid = 5;

    // TODO: remove after all lab server is newer than 4.201.0.
    // Optional: Device errors on the Lab Server side.
    stability.model.ExceptionDetail exception_detail = 6 [deprecated = true];

    // Optional: Flattened device errors on the Lab Server side.
    stability.model.FlattenedExceptionDetail flattened_exception_detail = 7;
  }
  repeated Device device = 5;

  // Optional.
  mobileharness.api.model.LabServerFeature lab_server_feature = 6;
}

message SignUpLabResponse {
  // Required.
  mobileharness.shared.version.VersionCheckResponse version_check_response = 1;

  // Uuids of the devices which are duplicated.
  repeated string duplicated_device_uuid = 2;
}

message HeartbeatLabRequest {
  // Optional: If Lab Server only detects one IP, it will report it and Master
  // will respect it, in case Master detects the wrong IP after the traffic goes
  // thought OnePlatform(b/32630821).
  string lab_ip = 1;

  // Required. Since this is used as primary key now.
  string lab_host_name = 2;

  message Device {
    // Required.
    //
    // Device UUID.
    string id = 1;

    // Required: Lab Server side timestamp.
    int64 timestamp_ms = 2;

    // Required: Device status on Lab Server side.
    mobileharness.api.model.DeviceStatus status = 3;
  }
  repeated Device device = 3;
}

message HeartbeatLabResponse {
  // Optional: Whether the lab needs to sign up all devices, if it's true, the
  // lab server needs to sign up all devices, otherwise the lab server only
  // needs to sign up the devices listed below in field device_id.
  bool sign_up_all = 1;

  // UUIDs of the devices which need to sign up to update the information.
  repeated string outdated_device_id = 2;
}

message SignOutDeviceRequest {
  // Required.
  //
  // Device UUID.
  string device_id = 1;

  // Optional: If Lab Server only detects one IP, it will report it and Master
  // will respect it, in case Master detects the wrong IP after the traffic goes
  // thought OnePlatform(b/32630821).
  string lab_ip = 2;

  // Required.
  string lab_host_name = 3;
}

message SignOutDeviceResponse {
  // Empty but may be extended.
}

message RemoveMissingDeviceRequest {
  // Required.
  string device_uuid = 1;

  // Required.
  string lab_host_name = 2;
}

message RemoveMissingDeviceResponse {}

message RemoveMissingDevicesRequest {
  repeated RemoveMissingDeviceRequest remove_missing_device_request = 1;
}

message RemoveMissingDevicesResponse {}

message RemoveMissingHostRequest {
  // Required.
  string lab_host_name = 1;
}

message RemoveMissingHostResponse {}

message RemoveMissingHostsRequest {
  repeated string lab_host_name = 1;
}

message RemoveMissingHostsResponse {}

message QuarantineDeviceRequest {
  string device_uuid = 1;    // Required.
  string lab_host_name = 2;  // Required.
  google.protobuf.Duration timeout = 3;
  string reason = 4;
}

message QuarantineDeviceResponse {
  // Empty but may be extended.
}

// Service for updating labs and device info to master.
service LabSyncService {
  // Sends full information of the Lab Server and its devices to Master.
  rpc SignUpLab(SignUpLabRequest) returns (SignUpLabResponse) {}

  // Signals that the Lab Server and devices are alive.
  rpc HeartbeatLab(HeartbeatLabRequest) returns (HeartbeatLabResponse) {}

  // Signs out device. No effect if the device does not exist.
  rpc SignOutDevice(SignOutDeviceRequest) returns (SignOutDeviceResponse) {}

  // Removes the missing device in master.
  rpc RemoveMissingDevice(RemoveMissingDeviceRequest)
      returns (RemoveMissingDeviceResponse) {}

  // Removes the missing devices in master.
  rpc RemoveMissingDevices(RemoveMissingDevicesRequest)
      returns (RemoveMissingDevicesResponse) {}

  // Removes the missing host in master.
  rpc RemoveMissingHost(RemoveMissingHostRequest)
      returns (RemoveMissingHostResponse) {}

  // Removes the missing hosts in master.
  rpc RemoveMissingHosts(RemoveMissingHostsRequest)
      returns (RemoveMissingHostsResponse) {}

  // Quarantine a device.
  rpc QuarantineDevice(QuarantineDeviceRequest)
      returns (QuarantineDeviceResponse) {}
}
