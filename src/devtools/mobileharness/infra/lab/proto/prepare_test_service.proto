/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package mobileharness.infra.lab;

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "src/devtools/common/metrics/stability/model/proto/exception.proto";
import "src/devtools/mobileharness/api/model/proto/device.proto";
import "src/devtools/mobileharness/api/model/proto/error.proto";
import "src/devtools/mobileharness/api/model/proto/job.proto";
import "src/devtools/mobileharness/infra/container/proto/mode_setting.proto";
import "src/devtools/mobileharness/infra/container/proto/sandbox_setting.proto";
import "src/devtools/mobileharness/infra/container/proto/test_engine.proto";
import "src/devtools/mobileharness/shared/trace/proto/span.proto";
import "src/devtools/mobileharness/shared/version/proto/version.proto";

option java_package = "com.google.devtools.mobileharness.infra.lab.proto";
option java_outer_classname = "PrepareTestServiceProto";

message CreateTestRequest {
  // Required.
  mobileharness.shared.version.VersionCheckRequest version_check_request = 1;
  // It should contain at least one device. The device order matters.
  repeated string device_id = 2;
  // Required.
  Job job = 3;
  // Required.
  Test test = 4;

  ContainerSetting container_setting = 5;

  // The span of the method which calls this RPC call.
  mobileharness.shared.trace.ParentSpan parent_span = 6;

  message Job {
    // Required.
    string job_id = 1;
    // Required.
    string job_name = 2;
    // Required. It represents client-side time.
    int64 job_create_time_ms = 3;
    // Required. It represents client-side time.
    int64 job_start_time_ms = 4;
    // Required.
    mobileharness.api.model.Timeout timeout = 5;
    // Required.
    // It should contain the same devices with the device_id field.
    mobileharness.api.model.JobFeature job_feature = 6;
    // Optional.
    // If true, this job will not be synced to master,
    // and will not be checked for expiration from master.
    bool disable_master_syncing = 7;
    // Optional.
    // The files to be resolved in lab.
    repeated ResolveFileItem lab_resolve_file = 8;
  }

  message Test {
    // Required.
    string test_id = 1;
    // Required.
    string test_name = 2;
    // Required. It represents client-side time.
    int64 test_create_time_ms = 3;
    // Required. It represents client-side time.
    int64 test_start_time_ms = 4;
  }

  // The file that should be resolved in lab.
  message ResolveFileItem {
    string tag = 1;
    string file = 2;
    map<string, string> resolving_parameter = 3;
  }

  // Container and sandbox mode preferences will be handled as the following
  // priority:
  // 1. All mandatory preferences.
  // 2. Container mode preference.
  // 3. Sandbox mode preference.
  message ContainerSetting {
    mobileharness.infra.container.ContainerModePreference
        container_mode_preference = 1;
    // True if lab server needs to get license from client before starting the
    // test engine. Only meaningful in container mode.
    bool need_starting_license = 2;
    // Timeout that lab server waits until test engine is ready before returns.
    // Only meaningful when need_starting_license is false.
    int64 sync_starting_timeout_ms = 3;

    // Since MH lab server 4.71.
    mobileharness.infra.container.SandboxModePreference
        sandbox_mode_preference = 4;

    // Since MH lab server 4.87.
    mobileharness.infra.container.SandboxSetting sandbox_setting = 5;
  }
}

message CreateTestResponse {
  // Required.
  mobileharness.shared.version.VersionCheckResponse version_check_response = 1;
  // Device features in the same order of device_id in the request.
  repeated mobileharness.api.model.DeviceFeature device_feature = 2;
  // Since MH lab server 4.52.
  // Returns this response to avoid an extra GetTestEngineStatus rpc invocation.
  GetTestEngineStatusResponse get_test_engine_status_response = 3;
  // Since MH lab server 4.52.
  ContainerInfo container_info = 4;

  message ContainerInfo {
    // The final container mode of the test.
    bool is_container_mode = 1;

    // The final sandbox mode of the test.
    // Since MH lab server 4.71.
    bool is_sandbox_mode = 2;

    stability.model.ExceptionDetail exception_detail = 4;

    reserved 3;
  }
}

message GetTestEngineStatusRequest {
  // Required.
  string job_id = 1;
  // Required.
  string test_id = 2;
}

message GetTestEngineStatusResponse {
  // If the status is READY, it should also container the locator.
  mobileharness.infra.container.TestEngineStatus test_engine_status = 1;
  bool has_test_engine_locator = 2;
  mobileharness.infra.container.TestEngineLocator test_engine_locator = 3;

  stability.model.ExceptionDetail exception_detail = 6;

  mobileharness.infra.container.ResolveFileStatus resolve_file_status = 7;

  stability.model.ExceptionDetail resolve_file_exception_detail = 8;

  reserved 4, 5;
}

message TestRunnerTiming {
  // Timestamp when the test is started.
  google.protobuf.Timestamp start_timestamp = 1;

  // Timestamp when the test is executed.
  google.protobuf.Timestamp execute_timestamp = 2;

  // Time it takes to setup test engine.
  google.protobuf.Duration test_engine_setup_time = 3;
}

message StartTestEngineRequest {
  // Required.
  string job_id = 1;
  // Required.
  string test_id = 2;
}

message StartTestEngineResponse {}

message CloseTestRequest {
  // Required.
  string job_id = 1;
  // Required.
  string test_id = 2;
}

message CloseTestResponse {
  // Indicates the test runner start/execute timing, etc.
  TestRunnerTiming test_timing = 1;
}

// Since MH lab 4.51.
service PrepareTestService {
  // Creates a MH remote-mode test in the MH lab.
  rpc CreateTest(CreateTestRequest) returns (CreateTestResponse) {}

  // Gets the test engine status of a test.
  // Since MH lab 4.52.
  rpc GetTestEngineStatus(GetTestEngineStatusRequest)
      returns (GetTestEngineStatusResponse) {}

  // Asynchronously starts the test engine of a test.
  // Only necessary if container_setting.need_client_license is true.
  // Since MH lab 4.52.
  rpc StartTestEngine(StartTestEngineRequest)
      returns (StartTestEngineResponse) {}

  // Closes a test and releases resources in the MH lab.
  rpc CloseTest(CloseTestRequest) returns (CloseTestResponse) {}
}
