/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package mobileharness.infra.ats.server;

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

option java_package = "com.google.devtools.mobileharness.infra.ats.server.proto";
option java_outer_classname = "ServiceProto";

message SessionRequest {
  oneof request {
    NewMultiCommandRequest new_multi_command_request = 1;
  }
}

// Test request sent to session service to start a test request.
message NewMultiCommandRequest {
  optional string user_id = 1;
  repeated CommandInfo commands = 2;
  optional google.protobuf.Duration queue_timeout = 3;
  optional int64 max_retry_on_test_failures = 4;
  optional int64 max_concurrent_tasks = 5;

  optional TestEnvironment test_environment = 6;
  repeated TestResource test_resources = 7;

  // Retry Info.
  optional string retry_previous_session_id = 8;
  optional string retry_type = 9;
  optional TestContext prev_test_context = 10;
}

// Command information of a test request.
message CommandInfo {
  optional string name = 1;
  string command_line = 2;
  optional int32 run_count = 3;
  optional int32 shard_count = 4;

  // Each entry correspond to a device. The most common key value pair is
  // "serial" and "<serial_id>".
  repeated DeviceDimension device_dimensions = 5;
  message DeviceDimension {
    string name = 1;
    string value = 2;
  }
}

message TestResource {
  optional string url = 1;
  optional string name = 2;
  optional string path = 3;
  optional bool decompress = 4;
  optional string decompress_dir = 5;
  optional bool mount_zip = 6;
  optional TestResourceParameters params = 7;
}

message TestResourceParameters {
  repeated string decompress_files = 1;
}

message TestEnvironment {
  map<string, string> env_vars = 1;
  repeated string setup_scripts = 2;
  repeated string output_file_patterns = 3;
  optional string output_file_upload_url = 4;
  optional bool use_subprocess_reporting = 5;
  optional google.protobuf.Duration invocation_timeout = 6;
  optional google.protobuf.Duration output_idle_timeout = 7;
  repeated string jvm_options = 8;
  map<string, string> java_properties = 9;
  optional string context_file_pattern = 10;
  repeated string extra_context_files = 11;
  optional string retry_command_line = 12;

  enum LogLevel {
    UNKNOWN = 0;
    VERBOSE = 1;
    DEBUG = 2;
    INFO = 3;
    WARNING = 4;
    ERROR = 5;
  }

  optional LogLevel log_level = 13;
  optional bool use_parallel_setup = 14;
  repeated DeviceActionConfigObject device_action_config_objects = 15;
}

message DeviceActionConfigObject {
  enum DeviceActionConfigObjectType {
    UNKNOWN_DEVICE_ACTION_CONFIG_OBJECT_TYPE = 0;
    TARGET_PREPARER = 1;
    RESULT_REPORTER = 2;
  }

  DeviceActionConfigObjectType type = 1;
  string class_name = 2;

  message Option {
    string name = 1;
    repeated string value = 2;
  }

  repeated Option option_values = 3;
}

// Command detail returned by session service.
message CommandDetail {
  string id = 1;
  string request_id = 2;
  string command_line = 3;
  optional CommandState state = 4;
  optional CancelReason cancel_reason = 5;
  optional ErrorReason error_reason = 6;
  CommandInfo original_command_info = 7;
  optional int64 passed_test_count = 8;
  optional int64 failed_test_count = 9;
  optional int64 total_test_count = 10;
  optional google.protobuf.Timestamp start_time = 11;
  optional google.protobuf.Timestamp end_time = 12;
  optional google.protobuf.Timestamp create_time = 13;
  optional google.protobuf.Timestamp update_time = 14;
}

enum CommandState {
  UNKNOWN_STATE = 0;  // Pending (Scheduling)
  QUEUED = 1;
  RUNNING = 2;
  CANCELED = 3;
  COMPLETED = 4;
  ERROR = 5;
  FATAL = 6;
}

enum CancelReason {
  UNKNOWN_CANCEL_REASON = 0;
  QUEUE_TIMEOUT = 1;
  REQUEST_API = 2;
  COMMAND_ALREADY_CANCELED = 3;
  REQUEST_ALREADY_CANCELED = 4;
  COMMAND_NOT_EXECUTABLE = 5;
  INVALID_REQUEST = 6;
  COMMAND_NOT_AVAILABLE = 7;
  INVALID_RESOURCE = 8;
}

enum ErrorReason {
  UNKNOWN_REASON = 0;
  TOO_MANY_LOST_DEVICES = 1;
}

message CommandAttemptDetail {
  string id = 1;
  string request_id = 2;
  string command_id = 3;
  string task_id = 4;

  optional string host_name = 5;
  repeated string device_serials = 6;
  optional google.protobuf.Timestamp start_time = 7;
  optional google.protobuf.Timestamp end_time = 8;
  optional google.protobuf.Timestamp create_time = 9;
  optional google.protobuf.Timestamp update_time = 10;

  optional CommandState state = 11;
  optional int64 passed_test_count = 12;
  optional int64 failed_test_count = 13;
  optional int64 total_test_count = 14;
}

// Request detail returned by session service.
message RequestDetail {
  string id = 1;
  string user = 2;
  repeated CommandInfo command_infos = 3;
  optional int64 priority = 4;
  optional google.protobuf.Duration queue_timeout = 5;
  optional int64 max_retry_on_test_failures = 6;
  optional int64 max_concurrent_tasks = 7;

  enum RequestState {
    UNKNOWN = 0;  // Pending (Scheduling)
    QUEUED = 1;
    RUNNING = 2;
    CANCELED = 3;
    COMPLETED = 4;
    ERROR = 5;
  }

  optional RequestState state = 8;
  optional google.protobuf.Timestamp start_time = 9;
  optional google.protobuf.Timestamp end_time = 10;
  optional google.protobuf.Timestamp create_time = 11;
  optional google.protobuf.Timestamp update_time = 12;
  optional string api_module_version = 13;
  map<string, CommandDetail> command_details = 14;
  repeated CommandAttemptDetail command_attempt_details = 15;

  optional string cluster = 16;
  optional string run_target = 17;
  optional int64 run_count = 18;
  optional int64 shard_count = 19;

  optional CancelReason cancel_reason = 20;
  optional NewMultiCommandRequest original_request = 21;
  optional string next_attempt_session_id = 22;

  // Test context for each command id.
  map<string, TestContext> test_context = 23;
}

message TestContext {
  optional string command_line = 1;
  map<string, string> env_var = 2;
  repeated TestResource test_resource = 3;
}

message AtsServerSessionNotification {
  oneof notification {
    CancelSession cancel_session = 1;
  }
}

message CancelSession {}
