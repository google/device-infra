/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package mobileharness.infra.ats.console.controller;

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

option java_package = "com.google.devtools.mobileharness.infra.ats.console.controller.proto";
option java_outer_classname = "SessionPluginProto";

message AtsSessionPluginConfig {
  oneof command {
    RunCommand run_command = 1;
    ListCommand list_command = 2;
    DumpCommand dump_command = 3;
  }
}

message AtsSessionPluginOutput {
  oneof result {
    Success success = 1;

    Failure failure = 2;
  }

  message Success {
    // Required.
    string output_message = 1;
  }

  message Failure {
    // Required.
    string error_message = 1;
  }

  // Conditionally required.
  //
  // Required for RunCommand and after the session starts.
  RunCommandState run_command_state = 3;
}

message AtsSessionPluginNotification {
  oneof type {
    AtsSessionCancellation session_cancellation = 1;
  }
}

message AtsSessionCancellation {
  // Required.
  string reason = 1;

  // Optional. Whether to cancel the session aggressively.
  bool aggressive = 2;
}

enum DeviceType {
  DEVICE_TYPE_UNSPECIFIED = 0;
  EMULATOR = 1;
  REAL_DEVICE = 2;
}

message ModuleMetadataFilterEntry {
  // Required.
  string key = 1;
  // Required.
  string value = 2;
}

message RunCommand {
  // Required.
  //
  // Example: "cts".
  string test_plan = 1;

  // Required.
  string xts_root_dir = 2;

  // Optional.
  repeated string device_serial = 3;

  // Optional.
  repeated string module_name = 4;

  // Optional.
  optional int32 shard_count = 5;

  // Optional.
  repeated string extra_arg = 6;

  // Required for XtsTradefedTest
  string xts_type = 7;

  // Optional.
  optional string python_pkg_index_url = 8;

  repeated string include_filter = 9;

  repeated string exclude_filter = 10;

  // Optional.
  optional int32 retry_session_index = 11;
  // Optional.
  optional string retry_session_result_dir_name = 33;
  // Optional.
  optional string retry_type = 12;

  // Optional.
  optional string test_name = 13;

  // Required.
  RunCommandState initial_state = 14;

  // Optional.
  optional string sub_plan_name = 15;

  // Optional. Whether to include html reports in the result zip file.
  optional bool html_in_zip = 16;

  // Optional. Whether to enable xts dynamic download.
  optional bool enable_xts_dynamic_download = 17;

  // Optional. Exclude devices with the given serial numbers.
  repeated string exclude_device_serial = 18;

  // Optional. Device type to force the test to run on.
  optional DeviceType device_type = 19;

  // Optional. Run test on device with this product type(s).
  repeated string product_type = 20;

  // Optional. Run test on device with this property value.
  map<string, string> device_property = 21;

  // Optional. Set battery requirement for test device.
  optional int32 max_battery_level = 22;
  optional int32 min_battery_level = 23;
  optional int32 max_battery_temperature = 24;

  // Optional. Set min sdk level requirement for test device.
  optional int32 min_sdk_level = 25;

  // Optional. Set max sdk level requirement for test device.
  optional int32 max_sdk_level = 26;

  // Optional. Whether reporting system checkers as test or not.
  optional bool report_system_checkers = 27;

  // Optional. Whether device info collection should be skipped.
  optional bool skip_device_info = 28;

  // Optional.
  repeated string module_arg = 29;

  // Optional. A multimap of module metadata include filters.
  repeated ModuleMetadataFilterEntry module_metadata_include_filter = 30;

  // Optional. A multimap of module metadata exclude filters.
  repeated ModuleMetadataFilterEntry module_metadata_exclude_filter = 31;

  // Optional. Whether to broadcast results to CTS verifier. Only applicable to
  // CTS-V-HOST tests.
  optional bool enable_cts_verifier_result_reporter = 32;

  // xTS suite info from console.
  map<string, string> xts_suite_info = 34;
}

message RunCommandState {
  // Conditionally required.
  //
  // Required in AtsSessionPluginOutput.run_command_statue. Empty in
  // RunCommand.initial_state.
  //
  // The ID is an integer that is incremental in server.
  string command_id = 1;

  // Required.
  google.protobuf.Duration total_execution_time = 2;

  // Required.
  string command_line_args = 3;

  // Running invocations by OmniLab test ID.
  map<string, Invocations> running_invocation = 4;

  // Invocations of a test.
  message Invocations {
    // Required.
    google.protobuf.Timestamp start_time = 2;

    repeated Invocation invocation = 1;
  }

  message Invocation {
    // Required.
    string command_id = 1;

    // Required.
    google.protobuf.Timestamp start_time = 2;

    // Required.
    repeated string device_id = 3;

    // Required.
    //
    // Example: "running cts on build(s) 'DeviceBuildInfo{bid=123,
    // serial=12345}'"
    string state_summary = 4;
  }

  // Required.
  // The command line args that are separated by space.
  repeated string separated_command_line_args = 5;
}

message ListCommand {
  oneof command {
    ListDevicesCommand list_devices_command = 1;
    ListModulesCommand list_modules_command = 2;
  }
}

message ListDevicesCommand {
  // Whether to list all devices including placeholders.
  bool list_all_devices = 1;
}

message ListModulesCommand {
  // Required.
  string xts_root_dir = 1;

  // Required.
  string xts_type = 2;

  string module_parameter = 3;
}

message DumpCommand {
  oneof command {
    DumpStackTraceCommand dump_stack_trace_command = 1;
    DumpEnvVarCommand dump_env_var_command = 2;
    DumpUptimeCommand dump_uptime_command = 3;
  }
}

message DumpStackTraceCommand {}

message DumpEnvVarCommand {}

message DumpUptimeCommand {}
