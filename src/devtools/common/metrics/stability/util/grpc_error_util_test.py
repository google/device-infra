# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
import collections
import grpc
from absl.testing import absltest
from src.devtools.common.metrics.stability.util import grpc_error_util

_Metadata = collections.namedtuple(
    '_Metadata',
    (
        'key',
        'value',
    ),
)
_TEST_TRAILING_METADATA = (
    _Metadata(
        '__crpc_mse_300713958-bin',
        b'\n\xc8\x05\n\xc5\x05\x08\x01\x12\xc0\x05x\xda\xb5\x94Ak\x13A\x14\xc7I\x8b\xa5\x9d\x16-k\xa1eO\x83D{\x91A\x0b\x82\x9e$\xa6K\x92\x92\xb4\xb1\x9b\xe0\xa1\xd60\xd9\x9dl\xc6\xcc\xce,3\xb3i"\xf5"\x88G\x8f\xeaw\x10\xbc\xf9i\x04?\x80\'o\x1e\x9d\xcd$iMS,\x88\x97e\xe7\xbd7\xbf\xff\xfb\xbf},\xf8\xb4\x06\xd0\xf2\xcf\x0f\x8bN\xfe\xa0Z\xf4[\xbb\xcdz\xb5R,4\xbc\xdd\x96\xef\xf9~\xe5`\xbfU\xaf6K\x95\xfdV\xb5\xf0\xc4\xabn-\xc0\x9c\xf3#\xb7\x9b&\x8c\x06X\x93\x10*\xa2\x14\x15\x1c&,\x8d(\x87\x0c\xb7\tC\xb0\xd2\x81C\x91\xc2\x13\xcc5\xd4\x02\xaa\x84\x04\xb43\x84\xb1\x90\x04\xea.\xe6Pp2sU\xc1\x93\xaeP\x04\x06\x0c+\x059\x8e\x89\x82xTn*\xcd\xe9\xee\x88\xa8\xba"e\xe1\x14xD\x06Y\'T\xb7F\xc2\xc7\xb0#\xa4\xb9\x91q\xc6T\x04\x8fj\xe5\xd3b\xd3o\x1c\xd4\xbc\xc3V\xc5\xf7\x9b\xde\xe9U\xac\x9e>\xd8\xd9\xb9\xf7\xe8\xd8\xdd\x03\xe5@\xc4(\x12"b\x04\x85\xa4\xaf\x85`\n\xc5\xa2M\x19\xe9b\xc9\x8d\x0b\x84\x13j"\xa1\xb1N\xa4\x14\x12\xd5F\xd9\xb2\xcdz\x83\x80$\xda8\xbd\xf5y\x05\xbc\xcb\x81\xe7\x7f\xe7Q\xde\x91\x18\x05\x8c\x12\xae\x11\x13<\x92)\xe7\x94G\x8a\xc8>\r\x08\x92I\x80&\xef\xbe\x1d\xa3o\x8f\xcez(JD\x17\x18\x1b\xc7\x95{\xf3\xcf\n\xf4\x12\xf71|\r"\xe0\xcdk\xc4\xc4b\xc1QL\xb4\xa4\x81BJc\xd3\x18\xd5\xc3\x91f\x94=J\xe61f55e\xce\x12\xe5}\xd1#\xee\xc6L\xc2\n\xdd\x01o\xff\xb7\xe5\xeb\xd1\x15\x0c\xef\x81\xf79@\xff\xbd\x8fD\n-f:\xc8\x8c\xe7k\xc4,^X\xc6<dD\xaa\xe9T6/\x96\xda\x86>.\x82\x1e(Qa\x87\xaat\xdaFY\r\x91E\xcc\x98\xca79\x96\xc3\xb3\xc0\x98;\x1b\xaeR\xa5\t\'\xd2Y\x15\xbc\x8cY\xa7\xc8\xcc\xee\xbb\xeb\xe7@V\xeck\x0e\xbc\x00\x0f\'b\x94k"9f\xe7\x04+q\xc2\xf2\xf6\xe8kIp<!g\t\x07t\'\xec0\x9b\xee\xf9K\x96\xff}\x01\x9c\x00\xff\x12\xfe\x88\xbd\x97\xc6IC\x14\x12\xfb\xe70\x03it\x8dL8O2\x7f\x7fj%t\xd6\xcc\xfc+\xbc(\x0cr\xa0\xdd\x1bgD+\xfcm\t<\x06\xf0\x82\xf0\xb8\xfe\xd0|;\xdcf\xc4Y4\x14wc&j\t\xb7A\x19\xe4\xe7uN1\xa3\xaf\xcc\x97\xf7\x06$H\xb5\x90\x16\xb25\'cAf\xcf\xeb`;{Ei\xb6\xfe\x81\xe0A*e\xb6G\xd6k\xdd\xac\xdb\x14\xb6b`\xcf\x84\xec\x11\xe9n^L[\xe2\xafe\xf0\x14\xa0+\x12\xf3\x96f\xbb\xbc\x14\xf9\xe6\x1a\xd8\x06\xeb#$\xc3<\x1as\xec\xa5U{\xb0\x85_\xd6~\x03\\\x1e6\xd7',
    ),
)


class _GrpcError(grpc.RpcError, grpc.Call):
  """Helper class that emulates a gRPC error."""

  def __init__(
      self,
      code: int = 500,
      details: str = '_GrpcError',
      trailing_metadata: list[_Metadata] | None = None,
  ):
    self._code = code
    self._details = details
    self._trailing_metadata = trailing_metadata if trailing_metadata else []

  def code(self) -> int:
    return self._code

  def details(self):
    return self._details

  def trailing_metadata(self):
    return self._trailing_metadata


class GrpcErrorUtilTest(absltest.TestCase):

  def testGrpcErrorWithTrailingMetadata(self):
    rpc_error = _GrpcError(trailing_metadata=_TEST_TRAILING_METADATA)

    exception_detail = grpc_error_util.to_exception_detail(rpc_error)

    self.assertEqual(52209, exception_detail.summary.error_id.code)

  def testGrpcErrorWithNoTrailingMetadata(self):
    grpc_error_details = 'failed to connect to all addresses;'
    rpc_error = _GrpcError(details=grpc_error_details)

    exception_detail = grpc_error_util.to_exception_detail(rpc_error)

    self.assertEqual(grpc_error_details, exception_detail.summary.message)


if __name__ == '__main__':
  absltest.main()
